""" This is a playground module for experiments
"""

import numpy as np
import matplotlib.pyplot as plt
import icp


def print_data_packet(h):
    print(h[80:164]) # protocol 42 bytes
    print(h[164:168]) # flag 'ffee' 2 bytes
    print(h[168:172]) # azimuth 2 bytes
    print(h[172:178]) # first point data 3 bytes
    print(h[172:364]) # first data block 3*16*2=96 bytes
    print(h[2564:2576]) # timestamp + factory 4+2=6 bytes


def print_pos_packet(h):
    print(h[7664:7748]) # protocol 42 bytes
    print(h[7748:8144]) # unused 198 bytes
    print(h[8144:8152]) # timestamp 4 bytes
    print(h[8152:8160]) # Pulse Per Second status + unused 1+3=4 bytes
    print(h[8160:8772]) # NMEA GPRMC sentence variable length (306 bytes)


h = open('2014-11-10-10-36-54_Velodyne-VLP_10Hz-County Fair.pcap', 'rb').read().hex()

data_prot = 'ff ff ff ff ff ff 60 76 88 00 00 00 08 00 45 00\
            04 d2 00 00 40 00 ff 11 b4 aa c0 a8 01 c8 ff ff\
            ff ff 09 40 09 40 04 be 00 00'.replace(' ', '')
pos_prot = 'ff ff ff ff ff ff 60 76 88 00 00 00 08 00 45 00\
            04 d2 00 00 40 00 ff 11 b4 aa c0 a8 01 c8 ff ff\
            ff ff 20 74 20 74 02 08 00 00'.replace(' ', '')
factory = '3721'

smth_strange_before_data_prot_1 = 'c9 05 61 54 8f df 05 00'.replace(' ', '') # 8 bytes (time stuff)
smth_strange_before_data_prot_2 = 'e0 04 00 00 e0 04 00 00'.replace(' ', '') # 8 bytes

s = '0000'
e = '0000'

s = int(s, 16)*2
e = int(e, 16)*2

# print_data_packet(h)
# print_pos_packet(h)

'''
# Return data from one rotation (75 data blocks for 10 Hz)
# differense between data blocks: 2528 or 3668 symbols
prot = [0]*75
counter = 0
pos = 202201941
while counter < 75:
    prot[counter] = h[pos:].find(data_prot) + pos
    pos = prot[counter] + 2528
    counter += 1
print(prot)

prot = [80, 2608, 5136, 8804, 11332, 13860, 16388, 18916, 21444, 23972, 26500,
        29028, 31556, 34084, 37752, 40280, 42808, 45336, 47864, 51532, 54060,
        57728, 60256, 62784, 65312, 67840, 70368, 72896, 75424, 79092, 81620,
        84148, 86676, 89204, 91732, 95400, 99068, 101596, 104124, 106652, 109180,
        111708, 114236, 116764, 120432, 122960, 125488, 128016, 130544, 133072,
        135600, 139268, 142936, 145464, 147992, 150520, 153048, 155576, 158104,
        161772, 164300, 166828, 169356, 171884, 174412, 176940, 180608, 184276,
        186804, 189332, 191860, 194388, 196916, 199444, 203112]
prot = [205640, 208168, 210696, 213224, 215752, 218280, 221948, 224476, 228144,
        230672, 233200, 235728, 238256, 240784, 244452, 246980, 249508, 252036,
        254564, 257092, 259620, 263288, 265816, 268344, 272012, 274540, 277068,
        279596, 282124, 285792, 288320, 290848, 293376, 295904, 298432, 300960,
        303488, 307156, 309684, 312212, 315880, 318408, 320936, 323464, 327132,
        329660, 332188, 334716, 337244, 339772, 342300, 344828, 348496, 351024,
        353552, 356080, 359748, 362276, 364804, 368472, 371000, 373528, 376056,
        378584, 381112, 383640, 386168, 389836, 392364, 394892, 397420, 399948,
        403616, 406144, 409812]
prot = [202000048, 202002576, 202005104, 202007632, 202010160, 202012688, 202015216,
        202018884, 202022552, 202025080, 202027608, 202030136, 202032664, 202035192,
        202037720, 202041388, 202043916, 202046444, 202048972, 202051500, 202054028,
        202056556, 202059084, 202062752, 202065280, 202067808, 202070336, 202072864,
        202075392, 202077920, 202081588, 202084116, 202086644, 202089172, 202091700,
        202094228, 202096756, 202099284, 202102952, 202106620, 202109148, 202111676,
        202114204, 202116732, 202119260, 202121788, 202125456, 202127984, 202130512,
        202133040, 202135568, 202138096, 202140624, 202144292, 202146820, 202150488,
        202153016, 202155544, 202158072, 202160600, 202164268, 202166796, 202169324,
        202171852, 202174380, 202176908, 202179436, 202181964, 202185632, 202188160,
        202190688, 202194356, 202196884, 202199412, 202201940]
prot = [202205608, 202208136, 202210664, 202213192, 202215720, 202218248, 202220776,
        202223304, 202226972, 202229500, 202232028, 202234556, 202238224, 202240752,
        202243280, 202245808, 202249476, 202252004, 202254532, 202257060, 202259588,
        202262116, 202264644, 202268312, 202270840, 202273368, 202275896, 202278424,
        202282092, 202284620, 202287148, 202290816, 202293344, 202295872, 202298400,
        202300928, 202303456, 202305984, 202309652, 202312180, 202314708, 202317236,
        202319764, 202322292, 202325960, 202328488, 202332156, 202334684, 202337212,
        202339740, 202342268, 202344796, 202347324, 202350992, 202353520, 202356048,
        202358576, 202361104, 202363632, 202366160, 202369828, 202373496, 202376024,
        202378552, 202381080, 202383608, 202386136, 202388664, 202392332, 202394860,
        202397388, 202399916, 202402444, 202404972, 202407500]
prot = [404002196, 404004724, 404007252, 404009780, 404012308, 404014836, 404017364,
        404021032, 404023560, 404026088, 404028616, 404031144, 404033672, 404036200,
        404038728, 404041256, 404044924, 404047452, 404049980, 404052508, 404055036,
        404057564, 404061232, 404063760, 404066288, 404068816, 404071344, 404073872,
        404076400, 404080068, 404082596, 404085124, 404088792, 404091320, 404093848,
        404096376, 404098904, 404102572, 404105100, 404107628, 404110156, 404112684,
        404115212, 404117740, 404120268, 404123936, 404126464, 404128992, 404132660,
        404135188, 404137716, 404140244, 404143912, 404146440, 404148968, 404151496,
        404154024, 404156552, 404159080, 404161608, 404165276, 404167804, 404170332,
        404172860, 404176528, 404179056, 404181584, 404185252, 404187780, 404190308,
        404192836, 404195364, 404197892, 404200420, 404202948]
'''

'''
# time staff between protocol
ind = 400000000+250000*3
d = []
while ind > -1:
    a = h[ind:].find(smth_strange_before_data_prot_2)
    if a > -1:
        ind += a
        d.append(h[ind-16:ind])
        ind += 16
    else:
        ind = -1
    if len(d) == 100:
        break

print(d)
print(len(d))

d0 = ['c905615495da0500', 'c90561548fdf0500', 'c9056154e6e40500', 'c9056154f1e90500',
    'c90561545fef0500', 'c90561545af40500', 'c9056154eefa0500', 'c9056154eafe0500',
    'c905615402040600', 'c90561542b090600', 'c9056154460f0600', 'c905615474140600',
    'c905615490190600', 'c9056154ca1d0600', 'c905615434230600', 'c905615458290600',
    'c90561543e2e0600', 'c9056154e7330600', 'c90561541c390600', 'c9056154003e0600',
    'c905615428430600', 'c90561549a470600', 'c90561548f4c0600', 'c90561544a520600',
    'c90561540d570600', 'c9056154a75c0600', 'c905615449610600', 'c9056154ac670600',
    'c9056154c36c0600', 'c9056154e4700600', 'c90561540e760600', 'c9056154617b0600',
    'c905615445800600', 'c9056154b3850600', 'c9056154d88a0600', 'c9056154f68f0600',
    'c905615426950600', 'c9056154869a0600', 'c9056154bf9f0600', 'c90561544aa50600',
    'c905615420aa0600', 'c9056154f9b00600', 'c905615430b40600', 'c90561546eb90600',
    'c90561549dbe0600', 'c9056154ccc30600', 'c90561543eca0600', 'c9056154c1ce0600',
    'c9056154a5d30600', 'c9056154eed90600', 'c90561544dde0600', 'c9056154ebe20600',
    'c905615498e90600', 'c905615487ee0600', 'c90561547ff20600', 'c9056154a4f80600',
    'c9056154d9fc0600', 'c90561543c020700', 'c90561547d080700', 'c9056154a60c0700',
    'c9056154a6110700', 'c9056154eb160700', 'c9056154601d0700', 'c905615425220700',
    'c90561542f270700', 'c90561549f2c0700', 'c9056154f2310700', 'c905615407370700',
    'c9056154343c0700', 'c905615467410700', 'c905615475460700', 'c9056154934b0700',
    'c905615498500700', 'c90561547d550700', 'c90561547c5a0700', 'c9056154975f0700',
    'c9056154a3650700', 'c9056154b76a0700', 'c9056154f36f0700', 'c90561540c750700',
    'c9056154037a0700', 'c90561545b7f0700', 'c9056154ca840700', 'c9056154e1890700',
    'c9056154f18e0700', 'c9056154f9930700', 'c905615434990700', 'c9056154ac9e0700',
    'c90561541fa30700', 'c9056154e5a80700', 'c905615423ae0700', 'c905615420b30700',
    'c90561548ab80700', 'c9056154adbd0700', 'c9056154c7c20700', 'c905615429c80700',
    'c9056154a3cd0700', 'c905615454d20700', 'c9056154a0d70700', 'c9056154f3db0700']

d1 = ['f905615481890a00', 'f9056154c28e0a00', 'f905615417950a00', 'f9056154189a0a00',
    'f90561548a9f0a00', 'f9056154fca30a00', 'f90561548fa90a00', 'f90561543baf0a00',
    'f905615446b30a00', 'f90561548ab90a00', 'f90561546bbe0a00', 'f90561548ac20a00',
    'f9056154d1c80a00', 'f9056154f9cc0a00', 'f90561545ed20a00', 'f905615460d80a00',
    'f905615497dd0a00', 'f9056154e0e20a00', 'f9056154ace70a00', 'f905615410ed0a00',
    'f90561546af20a00', 'f905615406f70a00', 'f905615489fb0a00', 'f9056154bc000b00',
    'f905615454060b00', 'f9056154400c0b00', 'f905615429110b00', 'f905615458160b00',
    'f90561543d1c0b00', 'f9056154aa200b00', 'f9056154d1250b00', 'f90561548a2b0b00',
    'f9056154c7300b00', 'f9056154c2350b00', 'f9056154ad3a0b00', 'f905615425400b00',
    'f9056154f1440b00', 'f905615463490b00', 'f9056154b14f0b00', 'f9056154be530b00',
    'f9056154065a0b00', 'f9056154ee5e0b00', 'f905615478630b00', 'f9056154af690b00',
    'f90561548f6e0b00', 'f905615421730b00', 'f90561541e790b00', 'f9056154e87d0b00',
    'f90561544c830b00', 'f905615493880b00', 'f9056154d78d0b00', 'f9056154bd920b00',
    'f90561549e970b00', 'f90561543d9d0b00', 'f90561549fa20b00', 'f9056154eda60b00',
    'f9056154daac0b00', 'f905615422b20b00', 'f905615428b70b00', 'f90561546abc0b00',
    'f9056154dfc00b00', 'f9056154b7c60b00', 'f9056154facb0b00', 'f90561544ed10b00',
    'f905615423d60b00', 'f9056154fdda0b00', 'f9056154b2df0b00', 'f9056154fbe40b00',
    'f90561541aea0b00', 'f905615419ef0b00', 'f9056154a6f40b00', 'f9056154aff90b00',
    'f9056154e1fe0b00', 'f905615427040c00', 'f905615461090c00', 'f9056154530e0c00',
    'f90561549a130c00', 'f9056154f8180c00', 'f9056154e11d0c00', 'f905615431230c00',
    'f905615438280c00', 'f9056154db2e0c00', 'f9056154b6330c00', 'f9056154d3380c00',
    'f9056154fe3c0c00', 'f90561542f430c00', 'f905615427480c00', 'f9056154c54d0c00',
    'f9056154c6520c00', 'f90561543a570c00', 'f9056154325c0c00', 'f9056154a7620c00',
    'f90561547b660c00', 'f9056154d96b0c00', 'f9056154d2700c00', 'f90561542b770c00',
    'f9056154817c0c00', 'f905615462810c00', 'f905615472860c00', 'f9056154c58a0c00']

d2 = ['8a0661545b0e0900', '8a066154bb130900', '8a066154681a0900', '8a066154f91e0900',
    '8a0661542a230900', '8a066154a9280900', '8a066154ec2e0900', '8a066154d5330900',
    '8a06615411390900', '8a066154323e0900', '8a0661542b440900', '8a066154d7470900',
    '8a066154f34c0900', '8a0661540a520900', '8a0661544b570900', '8a066154a35c0900',
    '8a0661547c620900', '8a066154ac660900', '8a066154326c0900', '8a06615452720900',
    '8a0661544d770900', '8a066154d77c0900', '8a06615489810900', '8a06615446870900',
    '8a066154ff8b0900', '8a0661542c910900', '8a06615468950900', '8a0661547c9b0900',
    '8a066154e6a00900', '8a06615434a50900', '8a06615461ab0900', '8a06615446b00900',
    '8a0661547eb50900', '8a06615485ba0900', '8a066154d9bf0900', '8a066154f3c40900',
    '8a06615422ca0900', '8a06615453ce0900', '8a0661547dd40900', '8a0661540dda0900',
    '8a066154d3de0900', '8a0661541fe40900', '8a0661543ee90900', '8a0661547eee0900',
    '8a06615423f30900', '8a066154daf80900', '8a0661545dfd0900', '8a06615435020a00',
    '8a066154ce080a00', '8a066154020e0a00', '8a066154de120a00', '8a066154a0170a00',
    '8a0661546d1c0a00', '8a0661543a220a00', '8a066154fd270a00', '8a066154b42c0a00',
    '8a06615424320a00', '8a06615417370a00', '8a066154443c0a00', '8a0661544b400a00',
    '8a066154b1460a00', '8a066154ba4b0a00', '8a0661541d510a00', '8a066154a7550a00',
    '8a066154575a0a00', '8a0661547d5f0a00', '8a066154cf640a00', '8a066154dd690a00',
    '8a066154226f0a00', '8a06615467740a00', '8a06615495790a00', '8a066154e37e0a00',
    '8a066154e8830a00', '8a0661542b890a00', '8a066154318e0a00', '8a06615464930a00',
    '8a066154c9980a00', '8a066154b49d0a00', '8a066154e1a20a00', '8a06615420a80a00',
    '8a0661547dad0a00', '8a066154a2b20a00', '8a066154fab70a00', '8a066154d5bd0a00',
    '8a066154f6c20a00', '8a0661544ec80a00', '8a0661541ccd0a00', '8a066154c7d20a00',
    '8a066154b7d70a00', '8a066154fedb0a00', '8a06615489e20a00', '8a06615447e60a00',
    '8a0661542aec0a00', '8a066154f8f10a00', '8a066154f2f60a00', '8a066154fbfb0a00',
    '8a0661542b010b00', '8a066154b6050b00', '8a066154a00b0b00', '8a066154bd100b00']

d3 = ['8a066154d4900e00', '8a066154f9950e00', '8a066154679c0e00', '8a0661544ba10e00',
    '8a06615453a60e00', '8a06615496ab0e00', '8a0661547cb00e00', '8a06615454b60e00',
    '8a06615421bb0e00', '8a06615403c00e00', '8a066154b0c50e00', '8a0661549cca0e00',
    '8a066154f2cf0e00', '8a066154f0d40e00', '8a06615429da0e00', '8a06615448df0e00',
    '8a0661542fe50e00', '8a066154b7e90e00', '8a066154fcee0e00', '8a0661543bf40e00',
    '8a0661543ef90e00', '8a066154cbfd0e00', '8a06615496030f00', '8a066154e6080f00',
    '8a066154ea0d0f00', '8a06615444130f00', '8a06615460170f00', '8a066154a91c0f00',
    '8a066154a7210f00', '8a06615431270f00', '8a0661540a2c0f00', '8a06615485310f00',
    '8a066154c0360f00', '8a066154d63b0f00', '8a06615422410f00', '8b066154d3030000',
    '8b0661541a090000', '8b066154350e0000', '8b0661541d160000', '8b06615479180000',
    '8b066154dc1d0000', '8b066154f3220000', '8b0661542e280000', '8b066154092f0000',
    '8b066154e6320000', '8b06615477380000', '8b0661542a3e0000', '8b06615424420000',
    '8b0661543e470000', '8b066154a54d0000', '8b066154b1520000', '8b066154f8560000',
    '8b066154005d0000', '8b06615433610000', '8b0661543a660000', '8b066154db6c0000',
    '8b06615492710000', '8b066154fb750000', '8b066154387b0000', '8b06615476800000',
    '8b0661547a860000', '8b066154e48b0000', '8b066154ca900000', '8b06615416960000',
    '8b0661541b9b0000', '8b06615463a00000', '8b066154a8a40000', '8b066154baaa0000',
    '8b066154e9af0000', '8b066154fbb40000', '8b06615446ba0000', '8b0661546abf0000',
    '8b06615496c40000', '8b066154d8c90000', '8b066154e4ce0000', '8b0661547ed30000',
    '8b06615486d80000', '8b066154c7de0000', '8b066154a3e30000', '8b066154b2e70000',
    '8b06615406ed0000', '8b06615403f20000', '8b06615490f70000', '8b066154acfc0000',
    '8b066154e4010100', '8b0661543f070100', '8b066154560c0100', '8b066154a7110100',
    '8b0661549c160100', '8b066154bf1b0100', '8b066154f5200100', '8b0661548a280100',
    '8b066154572b0100', '8b066154c7300100', '8b066154b8350100', '8b066154f83a0100',
    '8b06615435410100', '8b066154c0450100', '8b0661549f4a0100', '8b066154c7500100']

for i in range(len(d0)-1):
    print(int(d0[i+1][12:14]+d0[i+1][10:12]+d0[i+1][8:10], 16) - int(d0[i][12:14]+d0[i][10:12]+d0[i][8:10], 16))
'''


'''
# A and B samples registration (B to A transformation)
# with ground filter (z > -1.5)
A = np.load('prot_3.npy')
B = np.load('prot_4.npy')

A = A[:,0:3]
B = B[:,0:3]

A = A[A[:,2] > -1.5]
B = B[B[:,2] > -1.5]

D = np.concatenate((A, B))

fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.scatter(D[:,0], D[:,1], D[:,2], s=1, marker='o') # c='#0000ff'
plt.show()

T, distances, iterations = icp.icp(B, A, tolerance=0.000001)
print(T)

C = np.dot(T[0:3,0:3], B.T).T
C += T[0:3, 3]

A = np.append(A, np.zeros((A.shape[0], 1)), axis=1)
C = np.append(C, np.ones((C.shape[0], 1)), axis=1)

D = np.concatenate((A, C))

fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.scatter(D[:,0], D[:,1], D[:,2], s=1, c=D[:,3], marker='o') # c='#0000ff'
plt.show()
'''
